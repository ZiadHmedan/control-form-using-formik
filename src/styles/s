
  import styled, { DefaultTheme } from 'styled-components';
import theme from './theme'; 
interface TextProps {
  bold?: boolean;
  size?: "base" | "medium" | "large";
  lineHeight?: "normal" | "tight";
  letterSpacing?: "normal" | "tight";
  white?: boolean;
}

 const getFontSize = (size: TextProps['size'], theme: DefaultTheme) => {
  return theme.typography.sizes[size || 'base'];
};
 const getLineHeight = (lineHeight: TextProps['lineHeight'], theme: DefaultTheme) => {
  return theme.typography.lineHeights[lineHeight || 'normal'];
};
 const getLetterSpacing = (letterSpacing: TextProps['letterSpacing'], theme: DefaultTheme) => {
  return theme.typography.letterSpacings[letterSpacing || 'normal'];
};
 const getFontWeight = (bold: TextProps['bold'], theme: DefaultTheme) => {
  return bold ? theme.typography.weights.bold : theme.typography.weights.normal;
};


export const Container = styled.div`
  max-width: 763px;
  padding: 4rem;
  background-color: ${theme.colors.white};
  margin: 0  auto;
  border-radius: 10px;
  display: flex;
  flex-direction: column;
  gap: 2.4rem;
`;
export const Typography = styled.div`
  font-size: ${(props) => props.theme.typography.sizes[props.$size]};
  font-weight: ${(props) => props.theme.typography.weights[props.$bold ? 'bold' : 'normal']};
  line-height: ${(props) => props.theme.typography.lineHeights[props.$lineHeight]};
  letter-spacing: ${(props) => props.theme.typography.letterSpacings[props.$letterSpacing]};
`;

export const StyledInput = styled.input`
  border-radius: 10px;
  height: 51px;
  border: 1px solid ${({theme})=>theme.colors.lightGrey};
`
export const StyledErrorMsg = styled.p`
  
`

export const StyledButton = styled.button`
  
`
import { Field, FieldProps } from "formik";
import { Typography } from "../styles/utils";
interface MyComponentProps {
  label: string;
  name: string;
  type?: string;
  options?: { label: string; value: string }[];
}
const ControlField: React.FC<MyComponentProps> = ({
  name,
  label,
  type,
  options,
}) => {
  if (!type) type = "text";
  return (
    <div>
      <Typography as="label">{label}</Typography>
      <Field name={name}>
        {(props: FieldProps<string>) => {
          const { field, meta } = props;
          return (
            <div>
              {type === "radio" && options ? (
                options.map(option => (
                  <label key={option.value}>
                    <input
                      type="radio"
                      id={`${name}-${option.value}`}
                      {...field}
                      value={option.value}
                      checked={field.value === option.value}
                    />
                    {option.label}
                  </label>
                ))
              ) : (
                <input type={type} id={name} {...field} />
              )}

              {meta.touched && meta.error ? "error" : null}
            </div>
          );
        }}
      </Field>
    </div>
  );
};
export default ControlField;
import {  Form, Formik } from "formik";
import * as Yup from "yup";
import ControlField from "./ControlField";

interface FormValues {
  firstName: string;
  lastName: string;
  email: string;
  queryType: string;
  message: string;
  consent: boolean;
}
const initialValues: FormValues = {
  firstName: "",
  lastName: "",
  email: "",
  queryType: "general",
  message: "",
  consent: false,
};

const validationSchema = Yup.object({
  firstName: Yup.string().required("Required"),
  lastName: Yup.string().required("Required"),
  email: Yup.string().email("Invalid email address").required("Required"),
  queryType: Yup.string().required("Required"),
  message: Yup.string().required("Required"),
  consent: Yup.boolean().oneOf([true], "Consent is required"),
});


const onSubmit = (values: FormValues) => console.log(values);

const RegisterForm: React.FC = () => {
  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
      <Form>
        {/* <Input/> */}
        <ControlField label= "First Name" name="firstName"/>
        <ControlField label= "Last Name" name="LastName"/>
        <ControlField label= "Email Address" name="LastName" type="email" />
        <ControlField
          label="Query Type"
          name="queryType"
          type="radio"
          options={[
            { label: "General Enquiry", value: "general" },
            { label: "Support Request", value: "support" },
          ]}
        />  
      </Form>
    </Formik>
  );
};

export default RegisterForm;
import RegisterForm from "./combonents/RegisterForm";
import { Container, Typography } from "./styles/utils";

const App: React.FC = () => {
  return (
    <Container>
      <Typography
        as="h1"
        $bold
        $size="large"
        $lineHeight="tight"
        $letterSpacing="tight"
      >
        Contact Us
      </Typography>
      
      <RegisterForm />
    </Container>
  );
};

export default App; please do this in best way possible
Code Debugging
Code Improvement
